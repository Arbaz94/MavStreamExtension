/**
 * Class: SimpleSampleClient_VideoQuery1
 * Original Author: Mayur Arora (mayur.arora@mavs.uta.edu)
 *
 * Indicate when a specific person (whose image or feature vector is given) entered the building.
 */


package edu.uta.dsms.client;

import edu.uta.dsms.client.Query;
import edu.uta.dsms.core.query.*;
import edu.uta.dsms.client.comm.*;

import com.thoughtworks.xstream.mapper.CannotResolveClassException;
import edu.uta.dsms.core.constants.SchedulingStrategy;
import edu.uta.dsms.core.streams.DataItem;

import java.io.ObjectInputStream;
import java.io.StringReader;
import java.net.Socket;
import java.util.ArrayList;

import java.util.Vector;

/**
 *
 * @author Mayur
 *
 * Indicate when a specific person (whose image or feature vector is given) entered the building.
 *
 */



public class Thesis_Query2
{

    public static void main(String args[])
    {
        // point filename to a well-formed xml file
        // ensure that the dtd is available.
        try
        {
            // Setup QOS by creating a set of tuples arraylists, one
            // for each type of QOS policy, adding a new Tuple to each

            ArrayList<CQ_Tuple> tuples1 = new ArrayList<CQ_Tuple>();
            ArrayList<CQ_Tuple> tuples2 = new ArrayList<CQ_Tuple>();
            ArrayList<CQ_Tuple> tuples3 = new ArrayList<CQ_Tuple>();

            tuples1.add(new CQ_Tuple("1,0.01"));
            tuples2.add(new CQ_Tuple("1,0.2"));
            tuples3.add(new CQ_Tuple("1,0.3"));

            long startTime = 0L;
            long endTime = 10000L;

            ArrayList<CQ_QOS> qos = new ArrayList<CQ_QOS>();

            qos.add(new CQ_QOS("latency",    "ms", 1, 10, tuples1));
            qos.add(new CQ_QOS("memory",     "ms", 1, 10, tuples2));
            qos.add(new CQ_QOS("throughput", "ms", 1, 10, tuples3));



            CQ_Stream Lab_entry = new CQ_Stream(1,"Lab_entry","Lab_entry");


            CQ_Project project1= new CQ_Project(3,"project_1","Lab_entry.FrameId,Lab_entry.ObjectId,Lab_entry.PrevObjectId");//,Lab_entry.FrameId,Lab_entry.ObjectId");
            CQ_Select select1 = new CQ_Select(13,"select1","sMatch(Lab_entry.FV,'[[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000025,0.000025,0.000074,0.000025,0.000296,0.000741,0.001359,0.004150,0.005114,0.006744,0.009931,0.009906,0.010475,0.009733,0.009338,0.009659,0.009338,0.009610,0.009437,0.008992,0.009412,0.010623,0.010450,0.011339,0.008869,0.009116,0.008869,0.010326,0.010326,0.010030,0.010030,0.009882,0.007955,0.009659,0.009116,0.010055,0.009808,0.009017,0.010499,0.009906,0.008844,0.008819,0.009289,0.010376,0.009116,0.010845,0.013760,0.012723,0.013563,0.011907,0.012303,0.011240,0.011240,0.012080,0.010228,0.011166,0.011364,0.010919,0.008572,0.007485,0.006374,0.005830,0.005657,0.004546,0.003903,0.003755,0.003261,0.002890,0.003508,0.002470,0.002495,0.003039,0.003088,0.002717,0.002643,0.002446,0.002050,0.002940,0.002421,0.002569,0.002742,0.002989,0.002446,0.001779,0.002446,0.001902,0.001655,0.001853,0.001754,0.001383,0.001556,0.001680,0.001112,0.001383,0.001878,0.001680,0.001334,0.001433,0.001458,0.001754,0.001408,0.001260,0.001235,0.001112,0.001211,0.000889,0.001161,0.001136,0.001062,0.001309,0.001260,0.001383,0.001038,0.001136,0.001482,0.001433,0.001309,0.001087,0.001161,0.001309,0.001433,0.001433,0.001087,0.001260,0.000815,0.001334,0.001235,0.001013,0.001038,0.001087,0.001062,0.000815,0.000815,0.001458,0.000988,0.001235,0.001211,0.001309,0.001359,0.001507,0.001260,0.001186,0.001359,0.001260,0.001532,0.001754,0.001408,0.001680,0.001458,0.001853,0.001433,0.001606,0.001655,0.001952,0.001853,0.002075,0.002174,0.002890,0.003039,0.003384,0.003335,0.003928,0.003459,0.003977,0.003829,0.003854,0.004051,0.005015,0.006942,0.007807,0.008696,0.008844,0.008474,0.007288,0.007016,0.006003,0.006547,0.008671,0.009313,0.007312,0.007140,0.006769,0.008202,0.009412,0.009832,0.010499,0.011191,0.010870,0.011240,0.007584,0.009363,0.006818,0.006398,0.005410,0.004570,0.004200,0.004150,0.005089,0.004447,0.004348,0.002026,0.001507,0.000988,0.001136,0.001235,0.000914,0.000642,0.000568,0.000296,0.000371,0.000198,0.000247,0.000420,0.000445,0.000445,0.000272,0.000148,0.000124,0.000049,0.000124,0.000074,0.000124,0.000025,0.000049,0.000000,0.000025,0.000025,0.000025,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],[0.000074,0.000049,0.000124,0.000247,0.000296,0.000741,0.001112,0.001779,0.002915,0.004966,0.008128,0.007683,0.009808,0.010573,0.013093,0.012426,0.012303,0.013488,0.012698,0.014081,0.013661,0.015144,0.015045,0.011809,0.013686,0.012105,0.012327,0.011586,0.011759,0.011265,0.012451,0.013365,0.012920,0.011043,0.011685,0.011858,0.011364,0.013291,0.011487,0.010573,0.010895,0.010623,0.011562,0.013192,0.014575,0.014032,0.013291,0.010598,0.011191,0.011438,0.010228,0.010573,0.009832,0.009363,0.008943,0.008696,0.007757,0.006522,0.005682,0.004595,0.003656,0.003557,0.002816,0.002372,0.002841,0.002347,0.002125,0.002001,0.001952,0.001754,0.002347,0.001705,0.001285,0.001309,0.001433,0.001458,0.001211,0.001482,0.001408,0.001186,0.001655,0.001211,0.001112,0.001285,0.001285,0.001433,0.001408,0.001112,0.001235,0.001408,0.000889,0.001309,0.001433,0.001062,0.000791,0.001383,0.001260,0.001507,0.001136,0.001260,0.000889,0.000815,0.001112,0.000963,0.001136,0.001334,0.001309,0.001260,0.001408,0.001235,0.001458,0.001136,0.001285,0.001235,0.001507,0.001062,0.000889,0.001334,0.001112,0.001285,0.000963,0.000692,0.000741,0.000741,0.000865,0.001013,0.001038,0.000741,0.000865,0.001062,0.001038,0.000914,0.000815,0.000865,0.000815,0.000766,0.000988,0.000963,0.001136,0.001161,0.001087,0.000939,0.001556,0.001655,0.001729,0.001878,0.001556,0.001927,0.002199,0.001927,0.002594,0.002890,0.002668,0.002866,0.002792,0.003137,0.003088,0.002915,0.002125,0.002297,0.002273,0.002199,0.002520,0.002866,0.003113,0.004175,0.004274,0.003977,0.004175,0.003706,0.004002,0.003236,0.005756,0.004644,0.004447,0.003879,0.004694,0.004990,0.005287,0.007337,0.007115,0.006225,0.006398,0.006448,0.005534,0.005509,0.004620,0.006522,0.007807,0.005657,0.006818,0.007732,0.008128,0.008622,0.011364,0.011463,0.010129,0.005460,0.004101,0.003434,0.003187,0.003310,0.005929,0.004768,0.005682,0.002989,0.003780,0.002890,0.002470,0.002668,0.002199,0.001630,0.001952,0.000791,0.000963,0.000766,0.000519,0.000519,0.000420,0.000618,0.000321,0.000247,0.000074,0.000173,0.000124,0.000124,0.000074,0.000124,0.000173,0.000025,0.000025,0.000025,0.000025,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],[0.000791,0.000296,0.000272,0.000371,0.000519,0.000692,0.001038,0.000865,0.001655,0.001482,0.002075,0.002742,0.004076,0.007140,0.009313,0.013983,0.015218,0.017046,0.017960,0.017861,0.017095,0.015860,0.015613,0.016082,0.014921,0.014081,0.016601,0.016428,0.015267,0.016700,0.014773,0.015292,0.015415,0.015613,0.016033,0.015613,0.015341,0.015761,0.015514,0.016972,0.016107,0.017515,0.014773,0.013488,0.011240,0.010499,0.009635,0.008301,0.008894,0.008350,0.007881,0.006448,0.004793,0.004422,0.003409,0.003557,0.003236,0.002965,0.002767,0.002940,0.002297,0.002545,0.002248,0.002421,0.002001,0.002495,0.001952,0.001803,0.002199,0.001606,0.001853,0.001927,0.002075,0.002050,0.001902,0.001606,0.001680,0.001556,0.001705,0.001828,0.002075,0.001853,0.001655,0.001532,0.001013,0.001606,0.001186,0.001532,0.001087,0.001235,0.001803,0.000840,0.001013,0.001359,0.001112,0.001136,0.001186,0.001383,0.001161,0.001482,0.001038,0.000939,0.001087,0.001260,0.000939,0.000963,0.001038,0.000988,0.001309,0.001038,0.001062,0.001211,0.000791,0.000791,0.000840,0.000766,0.000766,0.000543,0.000791,0.000741,0.000939,0.000840,0.000791,0.001112,0.001112,0.001062,0.001285,0.001383,0.001532,0.002149,0.002520,0.002273,0.002965,0.002421,0.002693,0.002520,0.002742,0.002223,0.001828,0.001482,0.001606,0.002050,0.001779,0.002421,0.002841,0.002643,0.003088,0.002545,0.003459,0.002643,0.003483,0.002965,0.001902,0.002223,0.002742,0.002792,0.002693,0.002322,0.001952,0.002495,0.002174,0.002100,0.003063,0.003261,0.003459,0.003829,0.003088,0.004595,0.003286,0.004570,0.003706,0.003434,0.003804,0.003557,0.003459,0.002125,0.002495,0.001976,0.002619,0.002199,0.002816,0.002965,0.003187,0.004496,0.004200,0.005213,0.004768,0.007214,0.004101,0.003977,0.004496,0.004200,0.005410,0.006843,0.007214,0.006794,0.007609,0.008103,0.008202,0.007559,0.010005,0.004768,0.003286,0.004620,0.003434,0.003706,0.004718,0.003409,0.002890,0.002792,0.003903,0.002199,0.002100,0.002149,0.001952,0.001754,0.001482,0.000988,0.000815,0.000346,0.000198,0.000618,0.000445,0.000321,0.000074,0.000222,0.000074,0.000074,0.000099,0.000099,0.000148,0.000074,0.000000,0.000025,0.000025,0.000025,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000]]',0.0004");


            CQ_Arrable arrable1=new CQ_Arrable(7,"arrable1","Lab_entry.PrevObjectId","Lab_entry.FrameId");


            CQ_Filter filter1=new CQ_Filter(9,"Filter1","Lab_entry.PrevObjectId","Lab_entry.FrameId","first");


            CQ_OrderBy order1=new CQ_OrderBy(17,"order1","Lab_entry.tbSourceTS","desc");

            CQ_GroupBy  groupBy1 = new CQ_GroupBy(14,
                    "groupBy1",
                    "Lab_entry.tbSourceTS",
                    "count",
                    "Lab_entry.tbSourceTS",
                    "Lab_entry.tbSourceTS");


            project1.addInput(order1);
            arrable1.addInput(select1);
            order1.addInput(select1);
            filter1.addInput(arrable1);
            groupBy1.addInput(select1);
            select1.addInput(Lab_entry);
           // project1


            CQ_ClientQuery cq = new CQ_ClientQuery(
                    new CQ_ContinuousQuery(
                            "testQuery",
                            qos,
                            project1,
                            startTime,
                            endTime,
                            Long.parseLong("0"),Long.parseLong("1000"),Long.parseLong("1000"),
                            SchedulingStrategy.RoundRobinSS.toString(),
                            "null",
                            10));


            // take what was read and serialize it back to XML
            System.out.println("Object Serialization to XML *****************");
            System.out.println(QueryBuilder.toXML(cq));
            System.out.println("*********************************************");

            Query q = new Query(new StringReader(QueryBuilder.toXML(cq)));
            Socket responseSock = q.execute(new ServerDefinition("localhost", 8000));

            ObjectInputStream ois = new ObjectInputStream(responseSock.getInputStream());

            while (true)
            {
                String resp = (String)ois.readObject();
                System.out.print(resp);
                if ("endQuery".equalsIgnoreCase(resp.trim()))
                    break;
            }

            ois.close();
            responseSock.close();

        }
        catch (CannotResolveClassException crce)
        {
            System.err.println(crce.getMessage());
            crce.printStackTrace();
            System.exit(-1);
        }
        catch (Throwable t)
        {
            System.err.println("Caught: " + t);
            t.printStackTrace();
        }
    }



}
